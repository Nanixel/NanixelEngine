#version 420 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec2 textureCoordinate;
layout(location = 2) in vec3 aNormal;

out vec2 textureCoord;
out vec3 Normal;
out vec3 FragPos;
out vec3 LightPosition;
//out vec3 CameraPosition;

uniform vec3 lightPos;
//uniform vec3 cameraPos;


uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;


void main() 
{
   gl_Position = projection * view * model * vec4(position, 1.0);
   textureCoord = vec2(textureCoordinate.x, textureCoordinate.y);
   // keep in mind that inversing matricies is an expensive operation and that this should be done in code.
   // Look at the basic lighting tutorial to get ideas of how to do this.
   Normal = mat3(transpose(inverse(view * model))) * aNormal;
   FragPos = vec3(view * model * vec4(position, 1.0));
   LightPosition = vec3(view * model * vec4(lightPos, 1.0f));
   //CameraPosition = vec3(view * model * vec4(cameraPos, 1.0f));
}