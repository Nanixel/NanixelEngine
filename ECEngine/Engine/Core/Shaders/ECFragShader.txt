#version 420 core

out vec4 FragColor;

in vec2 textureCoord;
in vec3 Normal;
in vec3 FragPos;
in vec3 LightPosition;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	sampler2D emission;
	float shininess;
};

struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec4 color;
uniform Material material;
uniform Light light;
uniform float time;

void main()
{	

	vec3 ambient = light.ambient * vec3(texture(material.specular, textureCoord));

	vec3 norm = normalize(Normal);
	// we normalize this because we just care about the direction, not the magnitude
	vec3 lightDirection = normalize(LightPosition - FragPos);
	// we use max to ensure the diff never becomes negative
	float diff = max(dot(norm, lightDirection), 0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.specular, textureCoord));
	
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-lightDirection, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	// subtract vec3(texture(specular)) from vec3(1.0) to inverse black and white values
	vec3 specular = light.specular * spec * vec3(texture(material.specular, textureCoord));

	vec3 emission = vec3(0.0);
	if (texture(material.specular, textureCoord).r == 0.0) { //rough check for black fragments inside the steel
		emission = texture(material.emission, textureCoord).rgb;
		//here we are adding time as the y coord of the texture
		emission = texture(material.emission, textureCoord + vec2(0.0, time)).rgb; //moving
		emission = emission * (sin(time) * 0.5 + 0.5) * 2.0;
	}
	vec3 result = ambient + diffuse + specular + emission;
	//vec4 texture
    FragColor = vec4(result, 1.0f);
}